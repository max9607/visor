@page "/Login"
@layout LoginLayout
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@inject IJSRuntime js

<PageTitle>Login</PageTitle>

@*<button @onclick="loginOffice">OFFICE 365</button>*@

<div class="body-login" style="background-image: url('https://saads.blob.core.windows.net/resource/imagenes/backgraundLogin.png' )">

    <div class="contenedor contenedorLogin">

        <div class="box card cardLogin" style="width: 500px;">

            <div class="title">Inicio de Sesión</div>

            <div>

                <img src="https://saads.blob.core.windows.net/resource/imagenes/office-365.png" alt="Office 365" width="200px" style="display: block; margin: auto;">

            </div>

            <div>

                <a style="width: 100%;" class="btn btn-warning"  @onclick="loginOffice">Continuar con Office 365</a>

            </div>

        </div>



    </div>

</div>
@*<style>
    .body-login {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    height: 100%;
    width: 100%;
    position: fixed;
}



.contenedor {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.box {
    width: 460px;
    padding: 50px;
}



.title {
    width: 100%;
    float: left;
    line-height: 46px;
    font-size: 34px;
    font-weight: 700;
    letter-spacing: 2px;
    color: #d83b01;
    margin-left: 45px;
    position: relative;
}



    .title:before {
        content: "";
        width: 5px;
        height: 100%;
        position: absolute;
        top: 0;
        left: -95px;
        background: #d83b01;
    }
</style>*@

@code {

    [SupplyParameterFromQuery]
    [Parameter]
    public string? returnpage { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {


       var authState = await authenticationStateTask!;

        if (authState.User.Identity!.IsAuthenticated)
        {
            var urlReturn = navigationManager.Uri.ToString();
            navigationManager.NavigateTo("/");
        }
        else
        {
            //guardar en el localStore el returnpage si no es null o vacio
            System.Web.HttpUtility.UrlEncode(returnpage);
            if (!string.IsNullOrEmpty(returnpage))
            {
                 await js.SetInLocalStorage("returnpage", returnpage);
            }
            
          
        }


    }


    private void loginOffice()
    {
        var urlLoginOffice = configuration["urllogin"];
        string urlLoginLocal = navigationManager.BaseUri + "Login/Auth";

        if (!string.IsNullOrEmpty(returnpage))
        {
            urlLoginLocal += "&returnpage=" + returnpage;
            urlLoginOffice += urlLoginLocal;
            navigationManager.NavigateTo(urlLoginOffice, true);
        }
        else
        {            
            urlLoginOffice += urlLoginLocal;
            navigationManager.NavigateTo(urlLoginOffice, true);
        }
    }

    

}
